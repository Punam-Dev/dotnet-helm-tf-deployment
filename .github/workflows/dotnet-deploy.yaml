name: Deploy
# Changed 'on' to enable this workflow to be called from other workflows
on:
  workflow_call:
    # Introduced 'inputs' to define parameters that can be passed when calling this workflow
    inputs:
      dotnet-version:
        description: "Specify the .NET version to use"
        required: true
        type: string
      app-name:
        required: true
        type: string
      sln-path:
        description: "Specify the path to the .sln file"
        required: true
        type: string
      tf-path:
        description: "Specify Terraform path"
        required: true
        type: string
      role-name:
        description: "Splecify Deployment role ARN"
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs: 
  build-test:
    name: Build And Test
    runs-on: ubuntu-latest

    steps: 
      - name: checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore ${{ inputs.sln-path }}

      - name: Install SonarScanner and dotnet-coverage
        run: |
            dotnet tool install --global dotnet-sonarscanner
            dotnet tool install --global dotnet-coverage

      - name: Run SonarQube Scanner (Begin)
        run: dotnet-sonarscanner begin /k:"${{ inputs.app-name }}" /o:"punam-dev" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml

      - run: dotnet build ${{ inputs.sln-path }} --no-restore
  
      - run: dotnet-coverage collect dotnet test ${{ inputs.sln-path }} -f xml -o "coverage.xml" --logger trx --collect:"XPlat Code Coverage"

      # - run: dotnet test ${{ inputs.sln-path }} --no-build --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test_results.trx"
  
      - name: Run SonarQube Scanner (End)
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Publish
        run: |
          projects=$(awk -F', ' '/Project/ {gsub(/"/, "", $2); print $2}' ${{ inputs.sln-path }} | sed 's/\\/\//g')

          echo "projects : $projects"

          # Loop through each project and check if it is a web project
          web_project=""
          for project in $projects; do
            echo "current project : $project"
            if grep -q 'Microsoft.NET.Sdk.Web' "${{ github.workspace }}/$project"; then
              web_project=${{ github.workspace }}/$project
              break
            fi
          done

          # Publish the web project if found
          if [ -n "$web_project" ]; then
            echo "Web project found: $web_project"
            dotnet publish "$web_project" -c Release -o ${{ github.workspace }}/publish --no-restore --verbosity normal
          else
            echo "No web project found in the solution."
            exit 1
          fi

      - name: Zip up Publish files
        run: |
          cd ${{ github.workspace }}/publish
          zip -r ${{ github.workspace }}/publish.zip ./*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app-name }}
          path: ${{ github.workspace }}/publish.zip
      
  dev-deploy:
    name: Deploy to Dev Env
    runs-on: ubuntu-latest
    needs: build-test
    environment: Dev

    steps: 
      - name: checkout repo
        uses: actions/checkout@v4

      # - name: Configure AWS Credentials from AWS Account in
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/${{ inputs.role-name }}
      #     aws-region: us-east-1
      #     role-session-name: ${{ inputs.role-name }}-deployment

      # - uses: actions/download-artifact@v4
      #   with:
      #     name: ${{ inputs.app-name }}

      # - name: Display structure of downloaded files
      #   run: ls -R

      # - name: Upload to S3
      #   run: aws s3 cp ${{ github.workspace }}/publish.zip s3://build-artifacts-github-action/${{ inputs.app-name }}/${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}/publish.zip

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v3

      # - name: Terraform Init
      #   id: tfinit
      #   working-directory: ${{ inputs.tf-path }}
      #   run: terraform init

      # - name: Terraform Plan
      #   id: tfplan
      #   working-directory: ${{ inputs.tf-path }}
      #   run: terraform plan -var-file="tfvars/dev.tfvars" -var "app_version=${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}"

      # - name: Terraform Apply
      #   id: tfApply
      #   working-directory: ${{ inputs.tf-path }}
      #   run: terraform apply -auto-approve -var-file="tfvars/dev.tfvars" -var "app_version=${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}"

  test-deploy:
    name: Deploy to Test Env
    runs-on: ubuntu-latest
    needs: dev-deploy
    environment: Test

    steps: 
      - run: echo "DEPLOYING THE INFRASTRUCTURE TO Test"

